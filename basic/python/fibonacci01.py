# 在Python中，yield是一個關鍵字，用於定義生成器（generator）函數。生成器是一種特殊的函數，可以逐步生成數值，而不是一次性返回所有結果。當函數中包含yield語句時，它會變成一個生成器函數。
# yield的主要用途是在迭代過程中生成序列值，而不需要將所有值都存儲在記憶體中。當生成器函數被調用時，它返回一個生成器對象，這個對象可以被遍歷，每次遍歷都會執行生成器函數的代碼，直到遇到yield語句。
# 當生成器函數執行到yield時，它會將當前的值返回給調用者，並將函數的狀態保存下來。下一次遍歷時，從上次yield的位置繼續執行代碼，並返回下一個值。這樣的過程可以持續進行，直到生成器函數結束或遇到結束條件。
# 使用yield可以節省記憶體空間，特別是當需要處理大量數據或無窮序列時。它可以讓你以一種更高效的方式逐步生成結果，而不必一次性計算並存儲所有結果。

def fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

if __name__ == "__main__":
    # 使用生成器函數生成斐波那契數列
    fib = fibonacci()
    
    # 遍歷生成器，逐步生成數列值
    for i in range(10):
        print(next(fib))    